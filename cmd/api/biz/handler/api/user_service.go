// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	api "github.com/jiuxia211/ice-pomelo/cmd/api/biz/model/api"
	"github.com/jiuxia211/ice-pomelo/cmd/api/biz/pack"
	"github.com/jiuxia211/ice-pomelo/cmd/api/biz/rpc"
	"github.com/jiuxia211/ice-pomelo/kitex_gen/user"
	"github.com/jiuxia211/ice-pomelo/pkg/utils"
)

// Register .
// @router /pomelo/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.RegisterResponse)

	apiToken, err := utils.CreateApiToken()
	if err != nil {
		pack.SendFailResponse(c, err)
		return

	}

	resp.ID, err = rpc.UserRegister(ctx, &user.RegisterRequest{
		ApiToken:         apiToken,
		Username:         req.Username,
		Password:         req.Password,
		Email:            req.Email,
		VerificationCode: req.VerificationCode,
	})
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// Login .
// @router /pomelo/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.LoginResponse)

	apiToken, err := utils.CreateApiToken()
	if err != nil {
		pack.SendFailResponse(c, err)
		return

	}

	resp.ID, resp.Token, err = rpc.UserLogin(ctx, &user.LoginRequest{
		ApiToken: apiToken,
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// SendVerificationCode .
// @router /pomelo/user/verification-code [POST]
func SendVerificationCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.SendVerificationCodeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.SendVerificationCodeResponse)

	apiToken, err := utils.CreateApiToken()
	if err != nil {
		pack.SendFailResponse(c, err)
		return

	}

	err = rpc.UserSendVerificationCode(ctx, &user.SendVerificationCodeRequest{
		ApiToken: apiToken,
		Email:    req.Email,
	})
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}

// GetUserInfo .
// @router /pomelo/user/get [POST]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.GetUserInfoResponse)

	apiToken, err := utils.CreateApiToken()
	if err != nil {
		pack.SendFailResponse(c, err)
		return

	}

	user, err := rpc.UserInfo(ctx, &user.GetUserInfoRequest{
		ApiToken: apiToken,
		Token:    req.Token,
		Id:       req.ID,
	})
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.User = pack.User(user)
	resp.Base = pack.BuildBaseResp(nil)
	pack.SendResponse(c, resp)
}
